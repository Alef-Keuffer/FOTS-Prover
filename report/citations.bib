@misc{lc2122,
url = {https://paper.dropbox.com/doc/LC-2021-2022-Enquadramento-das-Licoes-Teoricas-e-Trabalhos-Praticos.-k8rNBwB0iPVJlAoeI4bWe},
author = "Valença, José Manuel Esgalhado",
title = "LC 2021-2022: Enquadramento das Lições Teóricas e Trabalhos Práticos"
year = {2021},
publisher = {Departamento de Informática da Universidade do Minho}
}

@InProceedings{bmc,
author="Biere, Armin and Cimatti, Alessandro and Clarke, Edmund and Zhu, Yunshan",
editor="Cleaveland, W. Rance",
title="Symbolic Model Checking without BDDs",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="1999",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="193--207",
abstract="Symbolic Model Checking [3], [14] has proven to be a powerful technique for the verification of reactive systems. BDDs [2] have traditionally been used as a symbolic representation of the system. In this paper we show how boolean decision procedures, like St{\aa}lmarck's Method [16] or the Davis {\&} Putnam Procedure [7], can replace BDDs. This new technique avoids the space blow up of BDDs, generates counterexamples much faster, and sometimes speeds up the verification. In addition, it produces counterexamples of minimal length. We introduce a bounded model checking procedure for LTL which reduces model checking to propositional satisfiability.We show that bounded LTL model checking can be done without a tableau construction. We have implemented a model checker BMC, based on bounded model checking, and preliminary results are presented.",
isbn="978-3-540-49059-3"
}

@InProceedings{kind,
author="Sheeran, Mary and Singh, Satnam and St{\aa}lmarck, Gunnar",
editor="Hunt, Warren A. and Johnson, Steven D.",
title="Checking Safety Properties Using Induction and a SAT-Solver",
booktitle="Formal Methods in Computer-Aided Design",
year="2000",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="127--144",
abstract="We take a fresh look at the problem of how to check safety properties of finite state machines. We are particularly interested in checking safety properties with the help of a SAT-solver. We describe some novel induction-based methods, and show how they are related to more standard fixpoint algorithms for invariance checking. We also present preliminary experimental results in the verification of FPGA cores. This demonstrates the practicality of combining a SAT-solver with induction for safety property checking of hardware in a real design flow.",
isbn="978-3-540-40922-9"
}

%%%%%%%%%%%%%%%%%%%

@article{interpolation1,
  url = {https://www.sosy-lab.org/research/cpa-imc/},
  
  author = {Beyer, Dirk and Lee, Nian-Ze and Wendler, Philipp},
  
  keywords = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},

  year = {2021},
  
  title = {Interpolation and SAT-Based Model Checking Revisited: Adoption to Software Verification},
}

@phdthesis{interpolation2,
  url = {https://www.usi.ch/it/feeds/8797},

  author = {Fulvio Rollini, Simone},

  keywords = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},

  title = {Craig Interpolation and Proof Manipulation - Theory and Applications to Model Checking},

  year = {2014},

  university = {Università della Svizzera Italiana}
}

@InProceedings{ctigar,
    author="Birgmeier, Johannes and Bradley, Aaron R. and Weissenbacher, Georg",
    editor="Biere, Armin and Bloem, Roderick",
    title="Counterexample to Induction-Guided Abstraction-Refinement (CTIGAR)",
    booktitle="Computer Aided Verification",
    year="2014",
    publisher="Springer International Publishing",
    address="Cham",
    pages="831--848",
    abstract="Typical CEGAR-based verification methods refine the abstract domain based on full counterexample traces. The finite state model checking algorithm IC3 introduced the concept of discovering, generalizing from, and thereby eliminating individual state counterexamples to induction (CTIs). This focus on individual states suggests a simpler abstraction-refinement scheme in which refinements are performed relative to single steps of the transition relation, thus reducing the expense of refinement and eliminating the need for full traces. Interestingly, this change in refinement focus leads to a natural spectrum of refinement options, including when to refine and which type of concrete single-step query to refine relative to. Experiments validate that CTI-focused abstraction refinement, or CTIGAR, is competitive with existing CEGAR-based tools.",
    isbn="978-3-319-08867-9"
}

%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{pdrverification,
  doi = {10.48550/ARXIV.1908.06271},
  
  url = {https://arxiv.org/abs/1908.06271},
  
  author = {Beyer, Dirk and Dangl, Matthias},
  
  keywords = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {Software Verification with PDR: Implementation and Empirical Evaluation of the State of the Art},
  
  publisher = {arXiv},
  
  year = {2019},

  copyright = {arXiv.org perpetual, non-exclusive license}
}

@InProceedings{pdr1,
author="Bradley, Aaron R.",
editor="Jhala, Ranjit
and Schmidt, David",
title="SAT-Based Model Checking without Unrolling",
booktitle="Verification, Model Checking, and Abstract Interpretation",
year="2011",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="70--87",
abstract="A new form of SAT-based symbolic model checking is described. Instead of unrolling the transition relation, it incrementally generates clauses that are inductive relative to (and augment) stepwise approximate reachability information. In this way, the algorithm gradually refines the property, eventually producing either an inductive strengthening of the property or a counterexample trace. Our experimental studies show that induction is a powerful tool for generalizing the unreachability of given error states: it can refine away many states at once, and it is effective at focusing the proof search on aspects of the transition system relevant to the property. Furthermore, the incremental structure of the algorithm lends itself to a parallel implementation.",
isbn="978-3-642-18275-4"
}

@inproceedings{pdr2,
    author = {Een, Niklas and Mishchenko, Alan and Brayton, Robert},
    title = {Efficient Implementation of Property Directed Reachability},
    year = {2011},
    isbn = {9780983567813},
    publisher = {FMCAD Inc},
    address = {Austin, Texas},
    abstract = {Last spring, in March 2010, Aaron Bradley published the first truly new bit-level symbolic model checking algorithm since Ken McMillan's interpolation based model checking procedure introduced in 2003. Our experience with the algorithm suggests that it is stronger than interpolation on industrial problems, and that it is an important algorithm to study further. In this paper, we present a simplified and faster implementation of Bradley's procedure, and discuss our successful and unsuccessful attempts to improve it.},
    booktitle = {Proceedings of the International Conference on Formal Methods in Computer-Aided Design},
    pages = {125–134},
    numpages = {10},
    location = {Austin, Texas},
    series = {FMCAD '11}
}